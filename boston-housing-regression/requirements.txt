import pandas as pd
import numpy as np
from sklearn.datasets import load_boston
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import tensorflow as tf

# Load the Boston Housing dataset
boston = load_boston()
df = pd.DataFrame(data=boston.data, columns=boston.feature_names)
df['MEDV'] = boston.target

# Display the first few rows of the dataset
print('Dataset preview:')
print(df.head())

# Check for missing values
print('Missing values in each column:')
print(df.isnull().sum())

# Split the data into features and target variable
X = df.drop('MEDV', axis=1)
y = df['MEDV']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Build a Scikit-learn Linear Regression model
from sklearn.linear_model import LinearRegression
model_sk = LinearRegression()
model_sk.fit(X_train, y_train)
y_pred_sk = model_sk.predict(X_test)

# Evaluate the Scikit-learn model
from sklearn.metrics import mean_squared_error
mse_sk = mean_squared_error(y_test, y_pred_sk)
print('Mean Squared Error (Scikit-learn):', mse_sk)

# Build a TensorFlow neural network for regression
model_tf = tf.keras.Sequential([
    tf.keras.layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(1)
])
model_tf.compile(optimizer='adam', loss='mean_squared_error')

# Train the TensorFlow model
model_tf.fit(X_train, y_train, epochs=100, batch_size=16, verbose=1)

# Evaluate the TensorFlow model
y_pred_tf = model_tf.predict(X_test)
mse_tf = mean_squared_error(y_test, y_pred_tf)
print('Mean Squared Error (TensorFlow):', mse_tf)